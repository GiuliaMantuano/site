<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Codurance</title>
    <link href="/atom.xml" rel="self"/>
    <link href=""/>
    <updated>2016-05-13T15:56:14+00:00</updated>
    <id>http://codurance.com</id>
    <author>
        <name>Codurance</name>
        <email>hello@codurance.com</email>
    </author>
    <rights>Copyright (c) Codurance</rights>
    
    <entry>
        <id>/2016/05/11/aws-lambdas/</id>
        <title>AWS Lambda for Beginners</title>
        <link href="http://codurance.com/2016/05/11/aws-lambdas/"/>
        <published>2016-05-11T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;AWS Lambda is a compute service from Amazon. It makes deployment and provisioning very simple and fits very well with microservices based architecture. You can find out more about AWS Lambda &lt;a href=&quot;http://docs.aws.amazon.com/lambda/latest/dg/welcome.html&quot;&gt;here&lt;/a&gt;. Currently supported platforms are JVM, Node JS and Python.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/05/10/finite-state-machines-with-akka/</id>
        <title>Finite state machines with Akka</title>
        <link href="http://codurance.com/2016/05/10/finite-state-machines-with-akka/"/>
        <published>2016-05-10T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;As you could remember from previous posts, &lt;a href=&quot;http://codurance.com/2016/04/28/async-systems-with-sync-clients/&quot;&gt;Part 1&lt;/a&gt; and   &lt;a href=&quot;http://codurance.com/2016/04/30/akka-basics/&quot;&gt;Part 2&lt;/a&gt;, we&#39;re implementing a solution that integrates a sync client with an async system. Today we&#39;ll see how to keep track of the async operations so we can provide a sync response to the client. Let&#39;s start with the architectural diagram.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/05/07/code-smells-part-II/</id>
        <title>Code Smells – Part II</title>
        <link href="http://codurance.com/2016/05/07/code-smells-part-II/"/>
        <published>2016-05-07T12:10:00+00:00</published>
        
        <summary type="html">&lt;p&gt;In the last post, &lt;a href=&quot;http://codurance.com/2016/03/17/code-smells-part-I/&quot;&gt;Code Smells - Part I&lt;/a&gt;,  I talked about the bloaters: they are code smells that can be identified as Long Methods, Large Classes, Primitive Obsessions, Long Parameter List and Data Clumps. In this one, I would like to dig into the &lt;strong&gt;Object-Orientation Abusers&lt;/strong&gt; and the &lt;strong&gt;Change Preventers&lt;/strong&gt;.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/05/06/language-feature-envy/</id>
        <title>Language feature envy</title>
        <link href="http://codurance.com/2016/05/06/language-feature-envy/"/>
        <published>2016-05-06T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;In my day job I mainly write C# code. On my own I like to try other languages like Swift, F#, Clojure, Objective C or Java. I learn a lot from writing code in different languages. When I go back to C# I often miss some of the features C# does not have. By far what I miss the most is Java/Swift enums. It happens quite frequently that I need to express a few finite number of instances of a type. The &lt;a href=&quot;http://snipplr.com/view/42422/the-planet-enum-example/&quot;&gt;Java planets&lt;/a&gt; example illustrates this quite effectively.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/04/30/akka-basics/</id>
        <title>Akka basics</title>
        <link href="http://codurance.com/2016/04/30/akka-basics/"/>
        <published>2016-04-30T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;As &lt;a href=&quot;http://codurance.com/2016/04/28/async-systems-with-sync-clients&quot;&gt;the previous post&lt;/a&gt; explained our system is based on &lt;a href=&quot;http://akka.io/&quot;&gt;Akka&lt;/a&gt;. Before going into more detail about our solution, I&#39;d like to explain what Akka is about and why it is so awesome.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/04/28/async-systems-with-sync-clients/</id>
        <title>Async systems with sync clients</title>
        <link href="http://codurance.com/2016/04/28/async-systems-with-sync-clients/"/>
        <published>2016-04-28T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;As the &lt;a href=&quot;http://www.reactivemanifesto.org/&quot;&gt;Reactive Manifesto&lt;/a&gt; says Reactive systems are:&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/04/17/sorted-pagination-in-cassandra/</id>
        <title>Sorted pagination in Cassandra</title>
        <link href="http://codurance.com/2016/04/17/sorted-pagination-in-cassandra/"/>
        <published>2016-04-17T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Cassandra is a fantastic database for different use cases. There are different situations when you need to twist Cassandra a little and studying one of those could be a helpful exercise to better understand what is Cassandra about. Databases are complex beasts, approaching them with the right level of abstraction is vital. Their final goal is not storing data per se, but make that data accessible. Those read patterns will define which database is the best tool for the job.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/04/12/we-did-it-wrong-but-not-in-vain/</id>
        <title>We did it wrong, but not all was in vain</title>
        <link href="http://codurance.com/2016/04/12/we-did-it-wrong-but-not-in-vain/"/>
        <published>2016-04-12T00:24:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Yes, there was over engineering. Loads of it. Back in the mid 90s, when I started my career as a developer, the goal was to become an architect. No serious developer would dare writing a single line of code before selecting our preferred design patterns—we would then decide how the business requirements would fit into them. Yes, we would first come up with our architecture, then our macro design (layers) and domain model (including UML diagrams), and then we would think about the business requirements and detailed use cases. Yes, user stories were not really a thing back then. We had long use cases with a basic flow and many alternative flows.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/03/28/Mutual-Problems/</id>
        <title>Mutual Problems</title>
        <link href="http://codurance.com/2016/03/28/Mutual-Problems/"/>
        <published>2016-03-28T00:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;The HTTPS protocol is the well-established standard for securing our connections. Understanding how this protocol works is not a problem and the corresponding &lt;a href=&quot;https://tools.ietf.org/html/rfc2818&quot;&gt;RFC document&lt;/a&gt; is available since 2000.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/03/17/code-smells-part-I/</id>
        <title>Code Smells – Part I</title>
        <link href="http://codurance.com/2016/03/17/code-smells-part-I/"/>
        <published>2016-03-17T12:10:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Last weekend I was at &lt;a href=&quot;https://twitter.com/hashtag/socracan16&quot;&gt;SoCraTes Canaries&lt;/a&gt; and I gave my first talk ever about code smells. Oh boy! How nervous was I! But now that has passed, I was wondering what I should do with all information I gathered. And then I thought, maybe it&#39;s a good idea to put it all in a nice blog post.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/03/16/Containers-all-the-way-through/</id>
        <title>Containers all the way through...</title>
        <link href="http://codurance.com/2016/03/16/Containers-all-the-way-through/"/>
        <published>2016-03-16T00:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/03/03/cohesion-cornerstone-software-design/</id>
        <title>Cohesion - The cornerstone of Software Design</title>
        <link href="http://codurance.com/2016/03/03/cohesion-cornerstone-software-design/"/>
        <published>2016-03-03T12:10:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Cohesion is one of the most important concepts in software design. Cohesion is at the core of the vast majority of good design principles and patterns out there, guiding separation of concerns and maintainability. The term cohesion (alongside coupling) was first introduced by Larry Constantine in the late 60s as part of Structured Design and later published in more details by W. Stevens, G. Myers, and L. Constantine in 1974. Due to the growing complexity and cost of software back in the 60s, 70s, and 80s, loads of studies and research around software design and maintainability were done. Although we can still find some of these papers and research online today, they were done in a pre-Internet era and most of the work done during that period is either lost or not easily available.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/03/01/Docker-meets-Continuous-Deployment/</id>
        <title>Docker meets Continuous Deployment</title>
        <link href="http://codurance.com/2016/03/01/Docker-meets-Continuous-Deployment/"/>
        <published>2016-03-01T00:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;About one year ago I had my first contact with Docker. This new kid on the block promised to relieve our poor computers from installation of all tools, languages, dependencies and operating systems. Isolated run environments emerged on developers&#39; computers.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/02/22/open-financials/</id>
        <title>Open Financials</title>
        <link href="http://codurance.com/2016/02/22/open-financials/"/>
        <published>2016-02-22T14:54:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Early this month we took a big step towards full transparency and decided to open the financials to the whole company. Our decision is aligned to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Open-book_management&quot;&gt;open-book management&lt;/a&gt; concept.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/02/08/command-prompt-envy/</id>
        <title>Command Prompt Envy</title>
        <link href="http://codurance.com/2016/02/08/command-prompt-envy/"/>
        <published>2016-02-08T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;I&#39;m spending my time between Mac OS and Windows, and when I go back to my Windows machine I always feel the lack of my Mac command prompt.&lt;/p&gt;

</summary>
        
    </entry>
    
</feed>
