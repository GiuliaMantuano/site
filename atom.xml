<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Codurance</title>
    <link href="/atom.xml" rel="self"/>
    <link href=""/>
    <updated>2016-06-06T17:43:47+00:00</updated>
    <id>http://codurance.com</id>
    <author>
        <name>Codurance</name>
        <email>hello@codurance.com</email>
    </author>
    <rights>Copyright (c) Codurance</rights>
    
    <entry>
        <id>/2016/05/25/coordination-in-akka/</id>
        <title>Coordination in Akka</title>
        <link href="http://codurance.com/2016/05/25/coordination-in-akka/"/>
        <published>2016-05-25T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;This is the fifth post in the series about integrating sync clients with async systems (&lt;a href=&quot;http://codurance.com/2016/04/28/async-systems-with-sync-clients/&quot;&gt;1, &lt;/a&gt;&lt;a href=&quot;http://codurance.com/2016/04/30/akka-basics/&quot;&gt;2, &lt;/a&gt;&lt;a href=&quot;http://codurance.com/2016/05/10/finite-state-machines-with-akka/&quot;&gt;3, &lt;/a&gt;&lt;a href=&quot;http://codurance.com/2016/05/16/publish-subscribe-model-in-kafka/&quot;&gt;4&lt;/a&gt;). Here we&#39;ll see how to manage the actor&#39;s lifecycle, so our service can use the available resources efficiently.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/05/25/aws-api-gateway/</id>
        <title>AWS Lambda with API Gateway</title>
        <link href="http://codurance.com/2016/05/25/aws-api-gateway/"/>
        <published>2016-05-25T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;In a &lt;a href=&quot;/2016/05/11/aws-lambdas&quot;&gt;previous post&lt;/a&gt; I showed you how to create and deploy an AWS Lambda. We will continue that work and look at updating just the code for that lambda. We will also add a REST endpoint to the AWS Lambda using &lt;a href=&quot;https://aws.amazon.com/api-gateway&quot;&gt;AWS API Gateway&lt;/a&gt;.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/05/25/a-simple-TDD-environment-in-haskell/</id>
        <title>A simple TDD environment in Haskell</title>
        <link href="http://codurance.com/2016/05/25/a-simple-TDD-environment-in-haskell/"/>
        <published>2016-05-25T00:01:00+00:00</published>
        
        <summary type="html">&lt;p&gt;I recently implemented the &lt;a href=&quot;https://github.com/Gryff/bowling-kata&quot;&gt;bowling kata in Haskell&lt;/a&gt;. In the process, I found out how set up my environment to comfortably do Test Driven Development. Hopefully, others might find this post helpful to begin their journey with the language. I used the following components:&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/05/16/publish-subscribe-model-in-kafka/</id>
        <title>Publish-subscribe model in Kafka</title>
        <link href="http://codurance.com/2016/05/16/publish-subscribe-model-in-kafka/"/>
        <published>2016-05-16T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;This is the fourth post in the series about integrating sync clients with async systems (&lt;a href=&quot;http://codurance.com/2016/04/28/async-systems-with-sync-clients/&quot;&gt;1, &lt;/a&gt;&lt;a href=&quot;http://codurance.com/2016/04/30/akka-basics/&quot;&gt;2, &lt;/a&gt;&lt;a href=&quot;http://codurance.com/2016/05/10/finite-state-machines-with-akka/&quot;&gt;3&lt;/a&gt;). Here we&#39;ll try to understand how &lt;a href=&quot;http://kafka.apache.org/&quot;&gt;Kafka&lt;/a&gt; works in order to correctly leverage its publish-subscribe implementation.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/05/16/bowling-kata-in-clojure-fsharp-scala/</id>
        <title>Bowling Kata in Clojure, F# and Scala</title>
        <link href="http://codurance.com/2016/05/16/bowling-kata-in-clojure-fsharp-scala/"/>
        <published>2016-05-16T00:01:00+00:00</published>
        
        <summary type="html">&lt;p&gt;In one of our evening apprenticeship meetings, a pair was doing the &lt;a href=&quot;http://codingdojo.org/cgi-bin/index.pl?KataBowling&quot;&gt;Bowling Kata&lt;/a&gt; in Java. After reviewing their code, I thought that it would be a good idea to do it myself.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/05/14/retrospective-park/</id>
        <title>A Retrospective in the Park</title>
        <link href="http://codurance.com/2016/05/14/retrospective-park/"/>
        <published>2016-05-14T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;The other day, I facilitated a sprint retrospective in the park. The sun was shining, and we had all been working hard to complete our backlog, so it felt like a nice reward for everyone’s efforts. Holding a retrospective outdoors can also give it an energy and sense of enthusiasm that is harder to find in a small room.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/05/13/initiative-circles/</id>
        <title>Initiative Circles</title>
        <link href="http://codurance.com/2016/05/13/initiative-circles/"/>
        <published>2016-05-13T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;We have been trying to encourage decentralised decision making at Codurance. To that effect, everyone within the company understands that they have the power to make any decision they need to make so long as they seek advise from the people that may be impacted. In order to help people make effective decisions, all company information is available to everyone in the company, including financials and salaries. This is all well and good, but in practice people do not simply go and start making informed strategic decisions just because they have the power to do so. For one, they are busy with their day jobs and simply do not have much time to look at the company holistically. Even if they have some wonderful ideas, they may not have the inclination or confidence to kick-off the initiative.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/05/11/aws-lambdas/</id>
        <title>AWS Lambda for Beginners</title>
        <link href="http://codurance.com/2016/05/11/aws-lambdas/"/>
        <published>2016-05-11T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;AWS Lambda is a compute service from Amazon. It makes deployment and provisioning very simple and fits very well with microservices based architecture. You can find out more about AWS Lambda &lt;a href=&quot;http://docs.aws.amazon.com/lambda/latest/dg/welcome.html&quot;&gt;here&lt;/a&gt;. Currently supported platforms are JVM, Node JS and Python.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/05/10/finite-state-machines-with-akka/</id>
        <title>Finite state machines with Akka</title>
        <link href="http://codurance.com/2016/05/10/finite-state-machines-with-akka/"/>
        <published>2016-05-10T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;As you could remember from previous posts, &lt;a href=&quot;http://codurance.com/2016/04/28/async-systems-with-sync-clients/&quot;&gt;Part 1&lt;/a&gt; and   &lt;a href=&quot;http://codurance.com/2016/04/30/akka-basics/&quot;&gt;Part 2&lt;/a&gt;, we&#39;re implementing a solution that integrates a sync client with an async system. Today we&#39;ll see how to keep track of the async operations so we can provide a sync response to the client. Let&#39;s start with the architectural diagram.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/05/07/code-smells-part-II/</id>
        <title>Code Smells – Part II</title>
        <link href="http://codurance.com/2016/05/07/code-smells-part-II/"/>
        <published>2016-05-07T12:10:00+00:00</published>
        
        <summary type="html">&lt;p&gt;In the last post, &lt;a href=&quot;http://codurance.com/2016/03/17/code-smells-part-I/&quot;&gt;Code Smells - Part I&lt;/a&gt;,  I talked about the bloaters: they are code smells that can be identified as Long Methods, Large Classes, Primitive Obsessions, Long Parameter List and Data Clumps. In this one, I would like to dig into the &lt;strong&gt;Object-Orientation Abusers&lt;/strong&gt; and the &lt;strong&gt;Change Preventers&lt;/strong&gt;.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/05/06/language-feature-envy/</id>
        <title>Language feature envy</title>
        <link href="http://codurance.com/2016/05/06/language-feature-envy/"/>
        <published>2016-05-06T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;In my day job I mainly write C# code. On my own I like to try other languages like Swift, F#, Clojure, Objective C or Java. I learn a lot from writing code in different languages. When I go back to C# I often miss some of the features C# does not have. By far what I miss the most is Java/Swift enums. It happens quite frequently that I need to express a few finite number of instances of a type. The &lt;a href=&quot;http://snipplr.com/view/42422/the-planet-enum-example/&quot;&gt;Java planets&lt;/a&gt; example illustrates this quite effectively.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/04/30/akka-basics/</id>
        <title>Akka basics</title>
        <link href="http://codurance.com/2016/04/30/akka-basics/"/>
        <published>2016-04-30T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;As &lt;a href=&quot;http://codurance.com/2016/04/28/async-systems-with-sync-clients&quot;&gt;the previous post&lt;/a&gt; explained our system is based on &lt;a href=&quot;http://akka.io/&quot;&gt;Akka&lt;/a&gt;. Before going into more detail about our solution, I&#39;d like to explain what Akka is about and why it is so awesome.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/04/28/async-systems-with-sync-clients/</id>
        <title>Async systems with sync clients</title>
        <link href="http://codurance.com/2016/04/28/async-systems-with-sync-clients/"/>
        <published>2016-04-28T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;As the &lt;a href=&quot;http://www.reactivemanifesto.org/&quot;&gt;Reactive Manifesto&lt;/a&gt; says Reactive systems are:&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/04/17/sorted-pagination-in-cassandra/</id>
        <title>Sorted pagination in Cassandra</title>
        <link href="http://codurance.com/2016/04/17/sorted-pagination-in-cassandra/"/>
        <published>2016-04-17T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Cassandra is a fantastic database for different use cases. There are different situations when you need to twist Cassandra a little and studying one of those could be a helpful exercise to better understand what is Cassandra about. Databases are complex beasts, approaching them with the right level of abstraction is vital. Their final goal is not storing data per se, but make that data accessible. Those read patterns will define which database is the best tool for the job.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/04/12/we-did-it-wrong-but-not-in-vain/</id>
        <title>We did it wrong, but not all was in vain</title>
        <link href="http://codurance.com/2016/04/12/we-did-it-wrong-but-not-in-vain/"/>
        <published>2016-04-12T00:24:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Yes, there was over engineering. Loads of it. Back in the mid 90s, when I started my career as a developer, the goal was to become an architect. No serious developer would dare writing a single line of code before selecting our preferred design patterns—we would then decide how the business requirements would fit into them. Yes, we would first come up with our architecture, then our macro design (layers) and domain model (including UML diagrams), and then we would think about the business requirements and detailed use cases. Yes, user stories were not really a thing back then. We had long use cases with a basic flow and many alternative flows.&lt;/p&gt;

</summary>
        
    </entry>
    
</feed>
