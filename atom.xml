<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Codurance</title>
    <link href="/atom.xml" rel="self"/>
    <link href=""/>
    <updated>2015-11-03T12:15:08+00:00</updated>
    <id>http://codurance.com</id>
    <author>
        <name>Codurance</name>
        <email>hello@codurance.com</email>
    </author>
    <rights>Copyright (c) Codurance</rights>
    
    <entry>
        <id>/2015/11/02/time-to-go/</id>
        <title>Time To Go</title>
        <link href="http://codurance.com/2015/11/02/time-to-go/"/>
        <published>2015-11-02T09:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;I&#39;m writing that blog post I never thought I&#39;d write.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/11/01/practicing-well-crafted-design/</id>
        <title>Practicing Well-Crafted Design</title>
        <link href="http://codurance.com/2015/11/01/practicing-well-crafted-design/"/>
        <published>2015-11-01T18:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Katas are great, but not enough. In the past year I’ve been trying to find ways to teach our craftsmen and apprentices how to design software. Although we could discuss good design principles, it was very difficult to find a way to practice them. Katas are great for learning TDD, micro design, working in baby steps, and a few techniques for dealing with legacy code but we need more. We would like to practice requirements gathering, domain modelling, and well-crafted code all together, with the same fast feedback loop we get when we do katas. The problem is that we need a far bigger problem with overlapping rules so that we can experience incremental software design. Inspired by a session we had a &lt;a href=&quot;https://www.socrates-conference.de/&quot;&gt;Socrates Germany 2015&lt;/a&gt;, we are evolving a deliberate practice session that is allowing us to achieve that.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/10/26/Talk-to-the-business/</id>
        <title>Talk to the business</title>
        <link href="http://codurance.com/2015/10/26/Talk-to-the-business/"/>
        <published>2015-10-26T09:35:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Almost a month ago, I did this amazing course at &lt;a href=&quot;https://skillsmatter.com/&quot;&gt;SkillsMatter&lt;/a&gt;: &lt;a href=&quot;https://skillsmatter.com/courses/202-domain-model&quot;&gt;&quot;Eric Evans Domain Driven Design Immersion Workshop&quot;&lt;/a&gt;. The course was very intensive and provided me with the opportunity to reinforce a lot of concepts I already knew as well as learn a few more.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/10/22/transcending-rest-and-rpc/</id>
        <title>Transcending REST and RPC</title>
        <link href="http://codurance.com/2015/10/22/transcending-rest-and-rpc/"/>
        <published>2015-10-22T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;It seems that a new paradigm is coming. Facebook and Netflix have come up with different implementations for that idea. Some people are calling it &lt;a href=&quot;http://www.infoq.com/presentations/domain-driven-architecture&quot;&gt;Demand-Driven Architecture&lt;/a&gt;, but before I show you some solutions, let&#39;s go over some history to understand the problem. I will use the example that Netflix provides, but I think that most of us will find the patterns familiar.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/09/29/codereview/</id>
        <title>Code review: Why are we doing it?</title>
        <link href="http://codurance.com/2015/09/29/codereview/"/>
        <published>2015-09-29T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Developers across many organisations adopted code reviews as one of their core practices. Although that sounds like a very reasonable thing to do, over time the goal that led to the adoption of the practice is forgotten and the only thing left is the mindless application of the practice itself.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/09/14/clojure-schemas-are-swagger/</id>
        <title>Clojure (Prismatic) Schemas are Swagger</title>
        <link href="http://codurance.com/2015/09/14/clojure-schemas-are-swagger/"/>
        <published>2015-09-14T12:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Recently, I decided to include Swagger documentation to our time sheet application. Although Swagger provides tools to help clients integrate with your REST API the most powerful feature, in my opinion, is that it acts as &quot;living documentation&quot; for the API. Adding Swagger to my the application had a couple of pleasant side-effects:&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/09/10/interview-for-jaxenter/</id>
        <title>Interview with Sandro Mancuso - Software Craftsmanship</title>
        <link href="http://codurance.com/2015/09/10/interview-for-jaxenter/"/>
        <published>2015-09-10T16:36:00+00:00</published>
        
        <summary type="html">&lt;blockquote&gt;&lt;p&gt;Thinking of code as a beautiful work of art is a mistake. But at the same time we need to start seeing coding as a genuine skill that deserves professional recognition, says leading Software Craftsmanship advocate and JAX London speaker Sandro Mancuso.&lt;/p&gt;&lt;/blockquote&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/08/26/My-first-walking-skeleton/</id>
        <title>My first walking skeleton</title>
        <link href="http://codurance.com/2015/08/26/My-first-walking-skeleton/"/>
        <published>2015-08-26T09:00:00+00:00</published>
        
        <summary type="html">&lt;blockquote&gt;A Walking Skeleton is a tiny implementation of the system that performs a small end-to-end function. It need not use the final architecture, but it should link together the main architectural components. The architecture and the functionality can then evolve in parallel.
 &lt;footer&gt; &lt;cite&gt;&lt;a href=&quot;http://alistair.cockburn.us/index.php/Walking_skeleton&quot;&gt;Alistair Cockburn&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;



</summary>
        
    </entry>
    
    <entry>
        <id>/2015/08/18/How-katas-can-help-you-learn/</id>
        <title>How katas can help you learn</title>
        <link href="http://codurance.com/2015/08/18/How-katas-can-help-you-learn/"/>
        <published>2015-08-18T09:35:00+00:00</published>
        
        <summary type="html">&lt;p&gt;In the last couple of weeks I have spent my time doing katas to improve my Objective-C. As you may remember, I had an issue, &lt;a href=&quot;http://wp.me/p4i8Xl-7h&quot;&gt;that you can revisit here&lt;/a&gt;.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/08/17/increasing-complexity-one-entity-at-a-time/</id>
        <title>Increasing complexity one entity at a time</title>
        <link href="http://codurance.com/2015/08/17/increasing-complexity-one-entity-at-a-time/"/>
        <published>2015-08-17T09:35:00+00:00</published>
        
        <summary type="html">&lt;p&gt;While working on one of our internal tools, I decided to make a small comprise and not follow my own advice. We are building a mini CRM tool and the initial requirements were:&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/08/15/appropriate-rigour/</id>
        <title>Appropriate Rigour</title>
        <link href="http://codurance.com/2015/08/15/appropriate-rigour/"/>
        <published>2015-08-15T20:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;There are many metaphors to software development that make sense within different contexts but not others. When we talk about craftsmanship as a metaphor we are referring to the attitudes that the craftsman embodies in terms of dedication to customer satisfaction, quality and endless pursuit of excellence. Metaphors are a wonderful aid to comprehension where we can lift desired qualities from a well understood concept and use that to explain a new one. However, we must be careful on how we apply the metaphors.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/08/05/becoming-evergreen/</id>
        <title>Becoming Evergreen</title>
        <link href="http://codurance.com/2015/08/05/becoming-evergreen/"/>
        <published>2015-08-05T20:00:00+00:00</published>
        
        <summary type="html">&lt;blockquote&gt;&lt;p&gt;“It is only when the cold season comes that we know the Pine and Cypress to be evergreens.” - &lt;em&gt;Chinese Proverb&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/08/05/Why-you-should-always-follow-your-dreams/</id>
        <title>Why you should always follow your dreams!</title>
        <link href="http://codurance.com/2015/08/05/Why-you-should-always-follow-your-dreams/"/>
        <published>2015-08-05T13:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;I started at &lt;a href=&quot;http://codurance.com/&quot;&gt;Codurance&lt;/a&gt; a month and a half ago as a C# developer. I was glad to have the opportunity to work in a place where people value your effort to be a better developer.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/07/31/a-month-of-apprenticeship/</id>
        <title>My first month as an apprentice</title>
        <link href="http://codurance.com/2015/07/31/a-month-of-apprenticeship/"/>
        <published>2015-07-31T16:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;About a month ago, I started my apprenticeship at Codurance. I have learned a lot already in these few weeks, and I want to share some of it.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/07/18/cqrs-and-event-sourcing-for-dummies/</id>
        <title>CQRS and Event Sourcing for dummies</title>
        <link href="http://codurance.com/2015/07/18/cqrs-and-event-sourcing-for-dummies/"/>
        <published>2015-07-18T17:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;CQRS (Command and Query Responsibility Segregation) and Event Sourcing are concepts that are not new at all. Alongside NoSql, Functional Programming and Microservices, these revival concepts are getting traction because of their ability to deal with modern software challenges. Assuming that you&#39;re building a product that has a complex domain with a significant amount of users I can predict that if you follow more traditional architectural styles you will face the following problems how to scale and how to deal with complexity.&lt;/p&gt;

</summary>
        
    </entry>
    
</feed>
