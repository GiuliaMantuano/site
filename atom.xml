<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Codurance</title>
    <link href="/atom.xml" rel="self"/>
    <link href=""/>
    <updated>2016-04-29T15:06:20+00:00</updated>
    <id>http://codurance.com</id>
    <author>
        <name>Codurance</name>
        <email>hello@codurance.com</email>
    </author>
    <rights>Copyright (c) Codurance</rights>
    
    <entry>
        <id>/2016/04/17/sorted-pagination-in-cassandra/</id>
        <title>Sorted pagination in Cassandra</title>
        <link href="http://codurance.com/2016/04/17/sorted-pagination-in-cassandra/"/>
        <published>2016-04-17T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Cassandra is a fantastic database for different use cases. There are different situations when you need to twist Cassandra a little and studying one of those could be a helpful exercise to better understand what is Cassandra about. Databases are complex beasts, approaching them with the right level of abstraction is vital. Their final goal is not storing data per se, but make that data accessible. Those read patterns will define which database is the best tool for the job.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/04/12/we-did-it-wrong-but-not-in-vain/</id>
        <title>We did it wrong, but not all was in vain</title>
        <link href="http://codurance.com/2016/04/12/we-did-it-wrong-but-not-in-vain/"/>
        <published>2016-04-12T00:24:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Yes, there was over engineering. Loads of it. Back in the mid 90s, when I started my career as a developer, the goal was to become an architect. No serious developer would dare writing a single line of code before selecting our preferred design patterns—we would then decide how the business requirements would fit into them. Yes, we would first come up with our architecture, then our macro design (layers) and domain model (including UML diagrams), and then we would think about the business requirements and detailed use cases. Yes, user stories were not really a thing back then. We had long use cases with a basic flow and many alternative flows.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/03/28/Mutual-Problems/</id>
        <title>Mutual Problems</title>
        <link href="http://codurance.com/2016/03/28/Mutual-Problems/"/>
        <published>2016-03-28T00:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;The HTTPS protocol is the well-established standard for securing our connections. Understanding how this protocol works is not a problem and the corresponding &lt;a href=&quot;https://tools.ietf.org/html/rfc2818&quot;&gt;RFC document&lt;/a&gt; is available since 2000.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/03/17/code-smells-part-I/</id>
        <title>Code Smells – Part I</title>
        <link href="http://codurance.com/2016/03/17/code-smells-part-I/"/>
        <published>2016-03-17T12:10:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Last weekend I was at the &lt;a href=&quot;https://twitter.com/hashtag/socracan16&quot;&gt;SoCraTes Canaries&lt;/a&gt; and I gave my first talk ever about code smells. Oh boy! How nervous was I! But now that, that has passed I was wondering what I should do with all information I gathered. And then I thought, maybe it&#39;s a good idea to put it all in a nice blog post.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/03/16/Containers-all-the-way-through/</id>
        <title>Containers all the way through...</title>
        <link href="http://codurance.com/2016/03/16/Containers-all-the-way-through/"/>
        <published>2016-03-16T00:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/03/03/cohesion-cornerstone-software-design/</id>
        <title>Cohesion - The cornerstone of Software Design</title>
        <link href="http://codurance.com/2016/03/03/cohesion-cornerstone-software-design/"/>
        <published>2016-03-03T12:10:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Cohesion is one of the most important concepts in software design. Cohesion is at the core of the vast majority of good design principles and patterns out there, guiding separation of concerns and maintainability. The term cohesion (alongside coupling) was first introduced by Larry Constantine in the late 60s as part of Structured Design and later published in more details by W. Stevens, G. Myers, and L. Constantine in 1974. Due to the growing complexity and cost of software back in the 60s, 70s, and 80s, loads of studies and research around software design and maintainability were done. Although we can still find some of these papers and research online today, they were done in a pre-Internet era and most of the work done during that period is either lost or not easily available.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/03/01/Docker-meets-Continuous-Deployment/</id>
        <title>Docker meets Continuous Deployment</title>
        <link href="http://codurance.com/2016/03/01/Docker-meets-Continuous-Deployment/"/>
        <published>2016-03-01T00:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;About one year ago I had my first contact with Docker. This new kid on the block promised to relieve our poor computers from installation of all tools, languages, dependencies and operating systems. Isolated run environments emerged on developers&#39; computers.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/02/22/open-financials/</id>
        <title>Open Financials</title>
        <link href="http://codurance.com/2016/02/22/open-financials/"/>
        <published>2016-02-22T14:54:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Early this month we took a big step towards full transparency and decided to open the financials to the whole company. Our decision is aligned to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Open-book_management&quot;&gt;open-book management&lt;/a&gt; concept.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/02/08/command-prompt-envy/</id>
        <title>Command Prompt Envy</title>
        <link href="http://codurance.com/2016/02/08/command-prompt-envy/"/>
        <published>2016-02-08T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;I&#39;m spending my time between Mac OS and Windows, and when I go back to my Windows machine I always feel the lack of my Mac command prompt.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/02/07/coupling-in-distributed-systems/</id>
        <title>Coupling in distributed systems</title>
        <link href="http://codurance.com/2016/02/07/coupling-in-distributed-systems/"/>
        <published>2016-02-07T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Coupling and cohesion are key quality indicators. We strive for systems highly cohesive and loosely coupled, but high doesn&#39;t mean pure. The same goes with functional programming, we aim for isolating and reducing side effects, but we need them unless we want a useless system. It&#39;s good to modularise our systems, so whenever those modules need to talk to each other they&#39;ll effectively couple themselves. Our work is to create cohesive modules and minimising coupling as much as possible.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/01/31/isolating-integration-tests-with-the-spring-framework/</id>
        <title>Isolating integration tests and mocking dependencies with Spring Boot</title>
        <link href="http://codurance.com/2016/01/31/isolating-integration-tests-with-the-spring-framework/"/>
        <published>2016-01-31T00:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Integration tests can be slow and unreliable because they depend on too many components in the system. Up to a certain point, this is unavoidable: integration tests are here to validate how each part of your system plays with other internal or external components.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/01/15/premature-microservices/</id>
        <title>Premature Microservices</title>
        <link href="http://codurance.com/2016/01/15/premature-microservices/"/>
        <published>2016-01-15T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Building your app from the very start as microservices is not a great idea! Their deployment is complex - regardless of how good your microservices infra is. They create boundaries in your application that resist change. Software applications are complex systems and complex systems are grown not designed. In order to grow an efficient system - we must allow it to grow in directions that it needs to. Boundaries designed at the start will stunt that growth at certain axis when direction of growth is at its most unpredictable.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/01/15/GitHubAnimator/</id>
        <title>GitHubAnimator</title>
        <link href="http://codurance.com/2016/01/15/GitHubAnimator/"/>
        <published>2016-01-15T00:20:00+00:00</published>
        
        <summary type="html">&lt;h3&gt;The Beginning&lt;/h3&gt;




&lt;p&gt;Inspired by my friend &lt;a href=&quot;https://twitter.com/SamirTalwar&quot;&gt;@SamirTalwar&lt;/a&gt; and the initiative he set upon himself to &lt;a href=&quot;http://monospacedmonologues.com/post/136667358499/automating-the-world&quot;&gt;automate the world&lt;/a&gt; I picked up on an idea I had many months ago. Automating the generation of presentations using GitHub commits.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2016/01/10/clojure-vim-environment/</id>
        <title>Clojure VIM Environment</title>
        <link href="http://codurance.com/2016/01/10/clojure-vim-environment/"/>
        <published>2016-01-10T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;The &lt;a href=&quot;https://cursive-ide.com/&quot;&gt;Cursive&lt;/a&gt; plugin for Clojure is now out of its beta testing phase. I have been using it throughout its beta program and, I must say, it is pretty good. Sure, the refactoring capabilities are not quite on a par with those of IntelliJ for Java, but then Clojure is dynamic and asking for that kind of power is asking for the impossible.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/12/13/testing-multithreaded-code-in-java/</id>
        <title>Testing multithreaded code in Java</title>
        <link href="http://codurance.com/2015/12/13/testing-multithreaded-code-in-java/"/>
        <published>2015-12-13T00:20:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Testing multithreaded code is a tough challenge. The first advice that you get when trying to test concurrency is to isolate your concurrent concerns in the code as much as possible. This a general design advice but in this case it&#39;s even more important. Make sure to first properly unit test the logic that is wrapped by the concurrent construct. Otherwise you might spend a long time trying to figure out a concurrency problem that turns out to be flawed business logic in the end.&lt;/p&gt;

</summary>
        
    </entry>
    
</feed>
