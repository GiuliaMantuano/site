<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Codurance</title>
    <link href="/atom.xml" rel="self"/>
    <link href=""/>
    <updated>2015-09-03T11:20:47+00:00</updated>
    <id>http://codurance.com</id>
    <author>
        <name>Codurance</name>
        <email>hello@codurance.com</email>
    </author>
    <rights>Copyright (c) Codurance</rights>
    
    <entry>
        <id>/2015/08/26/My-first-walking-skeleton/</id>
        <title>My first walking skeleton</title>
        <link href="http://codurance.com/2015/08/26/My-first-walking-skeleton/"/>
        <published>2015-08-26T09:00:00+00:00</published>
        
        <summary type="html">&lt;blockquote&gt;A Walking Skeleton is a tiny implementation of the system that performs a small end-to-end function. It need not use the final architecture, but it should link together the main architectural components. The architecture and the functionality can then evolve in parallel.
 &lt;footer&gt; &lt;cite&gt;&lt;a href=&quot;http://alistair.cockburn.us/index.php/Walking_skeleton&quot;&gt;Alistair Cockburn&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;



</summary>
        
    </entry>
    
    <entry>
        <id>/2015/08/18/How-katas-can-help-you-learn/</id>
        <title>How katas can help you learn</title>
        <link href="http://codurance.com/2015/08/18/How-katas-can-help-you-learn/"/>
        <published>2015-08-18T09:35:00+00:00</published>
        
        <summary type="html">&lt;p&gt;In the last couple of weeks I have spent my time doing katas to improve my Objective-C. As you may remember, I had an issue, &lt;a href=&quot;http://wp.me/p4i8Xl-7h&quot;&gt;that you can revisit here&lt;/a&gt;.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/08/17/increasing-complexity-one-entity-at-a-time/</id>
        <title>Increasing complexity one entity at a time</title>
        <link href="http://codurance.com/2015/08/17/increasing-complexity-one-entity-at-a-time/"/>
        <published>2015-08-17T09:35:00+00:00</published>
        
        <summary type="html">&lt;p&gt;While working on one of our internal tools, I decided to make a small comprise and not follow my own advice. We are building a mini CRM tool and the initial requirements were:&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/08/15/appropriate-rigour/</id>
        <title>Appropriate Rigour</title>
        <link href="http://codurance.com/2015/08/15/appropriate-rigour/"/>
        <published>2015-08-15T20:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;There are many metaphors to software development that make sense within different contexts but not others. When we talk about craftsmanship as a metaphor we are referring to the attitudes that the craftsman embodies in terms of dedication to customer satisfaction, quality and endless pursuit of excellence. Metaphors are a wonderful aid to comprehension where we can lift desired qualities from a well understood concept and use that to explain a new one. However, we must be careful on how we apply the metaphors.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/08/05/becoming-evergreen/</id>
        <title>Becoming Evergreen</title>
        <link href="http://codurance.com/2015/08/05/becoming-evergreen/"/>
        <published>2015-08-05T20:00:00+00:00</published>
        
        <summary type="html">&lt;blockquote&gt;&lt;p&gt;“It is only when the cold season comes that we know the Pine and Cypress to be evergreens.” - &lt;em&gt;Chinese Proverb&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/08/05/Why-you-should-always-follow-your-dreams/</id>
        <title>Why you should always follow your dreams!</title>
        <link href="http://codurance.com/2015/08/05/Why-you-should-always-follow-your-dreams/"/>
        <published>2015-08-05T13:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;I started at &lt;a href=&quot;http://codurance.com/&quot;&gt;Codurance&lt;/a&gt; a month and a half ago as a C# developer. I was glad to have the opportunity to work in a place where people value your effort to be a better developer.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/07/31/a-month-of-apprenticeship/</id>
        <title>My first month as an apprentice</title>
        <link href="http://codurance.com/2015/07/31/a-month-of-apprenticeship/"/>
        <published>2015-07-31T16:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;About a month ago, I started my apprenticeship at Codurance. I have learned a lot already in these few weeks, and I want to share some of it.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/07/18/cqrs-and-event-sourcing-for-dummies/</id>
        <title>CQRS and Event Sourcing for dummies</title>
        <link href="http://codurance.com/2015/07/18/cqrs-and-event-sourcing-for-dummies/"/>
        <published>2015-07-18T17:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;CQRS (Command and Query Responsibility Segregation) and Event Sourcing are concepts that are not new at all. Alongside NoSql, Functional Programming and Microservices, these revival concepts are getting traction because of their ability to deal with modern software challenges. Assuming that you&#39;re building a product that has a complex domain with a significant amount of users I can predict that if you follow more traditional architectural styles you will face the following problems how to scale and how to deal with complexity.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/07/14/learning-from-our-failures/</id>
        <title>Learning from our failures</title>
        <link href="http://codurance.com/2015/07/14/learning-from-our-failures/"/>
        <published>2015-07-14T17:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;On my second day at Codurance, I managed to delete the repository with &lt;a href=&quot;http://codurance.com/&quot;&gt;Codurance&#39;s GitHub Pages&lt;/a&gt; on it. This made the website unavailable for the first time in a long time, and during best business hours.
I passed by all the checks Github does to make sure you know what you&#39;re doing, thinking I was about to delete the fork I accidentally created. When I saw afterwards that the fork was still there, I immediately realized what I had done.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/07/13/How-to-start-doing-TDD-in-iOS/</id>
        <title>How to start doing TDD in iOS</title>
        <link href="http://codurance.com/2015/07/13/How-to-start-doing-TDD-in-iOS/"/>
        <published>2015-07-13T12:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;I like to do apps. As a newbie TDD developer, I&#39;ve made my apps with tests but not driven by tests. I want to change that. I&#39;m learning to be a Craftsman, so TDD is an essential technique to know. It&#39;s your main tool. At Codurance it&#39;s unthinkable that you could code without doing TDD. That&#39;s one of the things that you learn in our apprenticeship program: to be able to do TDD without thinking about it and feel as if it&#39;s natural: as you breath to survive you do TDD to code.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/06/30/shape-your-infrastructure-with-terraform/</id>
        <title>Shape your infrastructure with Terraform</title>
        <link href="http://codurance.com/2015/06/30/shape-your-infrastructure-with-terraform/"/>
        <published>2015-06-30T12:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;The popularity of cloud infrastructure services has hugely increased over the last few years. Companies value the flexibility and reliability provided by such services. The simplicity of the solutions delivered by cloud providers should remove the burden from the shoulders of busy Dev and Ops people and give the possibility to focus on real customer&#39;s needs.&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/06/19/cloud-application-design-considerations/</id>
        <title>Cloud Application Design Considerations</title>
        <link href="http://codurance.com/2015/06/19/cloud-application-design-considerations/"/>
        <published>2015-06-19T17:00:00+00:00</published>
        
        <summary type="html">&lt;h1&gt;Cloud Application Design Considerations&lt;/h1&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/06/17/finding-the-biting-point/</id>
        <title>Finding the biting point with pair programming</title>
        <link href="http://codurance.com/2015/06/17/finding-the-biting-point/"/>
        <published>2015-06-17T09:00:00+00:00</published>
        
        <summary type="html">&lt;h2&gt;The inevitable imbalance in pair programming.&lt;/h2&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/06/17/inflection-point/</id>
        <title>Inflection Point</title>
        <link href="http://codurance.com/2015/06/17/inflection-point/"/>
        <published>2015-06-17T02:34:00+00:00</published>
        
        <summary type="html">&lt;p&gt;We all say that software design is all about trade-offs but how do we actually reason about it? How do we decide how much code we are going to write for a given task? Is the easiest thing that could possibly work the right approach? The simplest? How do we know the &lt;a href=&quot;http://www.infoq.com/presentations/Simple-Made-Easy&quot;&gt;difference between simple and easy&lt;/a&gt;? Is this even the right question?&lt;/p&gt;

</summary>
        
    </entry>
    
    <entry>
        <id>/2015/06/13/big-data-skills-spectrum/</id>
        <title>Big Data Skills Spectrum</title>
        <link href="http://codurance.com/2015/06/13/big-data-skills-spectrum/"/>
        <published>2015-06-13T18:00:00+00:00</published>
        
        <summary type="html">&lt;p&gt;Big Data has been a hype for many years. I’ve seen a few “Big Data” projects start in the past with a lot of fanfare and promise.The promise has always been that “we will start getting a holistic picture of our departmental silos and gain numerous insights from our data that will help us get ahead of our competitors”. The promise was rarely, if ever, fulfilled and the “Big Data” team slowly faded into the rest of the melting pot that we call the “IT department” in most large enterprises.&lt;/p&gt;

</summary>
        
    </entry>
    
</feed>
